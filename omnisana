#!/usr/bin/env ruby

require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'pp'
require './omnisana.rb'

class OptparseExample

  CODES = %w[iso-2022-jp shift_jis euc-jp utf8 binary]
  CODE_ALIASES = { "jis" => "iso-2022-jp", "sjis" => "shift_jis" }

  #
  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.library = []
    options.config_file = ""
    options.api_key  = ""
    options.inplace = false
    options.encoding = "utf8"
    options.transfer_type = :auto
    options.debug = false
    options.verbose = false
    options.sync_in = false
    options.sync_out = false

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: omnisana [options]"
      opts.separator "Sync your Asana tasks to OmniFocus 2 and back again."

      opts.separator ""
      opts.separator "Sync your tasks into OmniFocus: omnisana -a ABC123 -i"
      opts.separator "Sync your tasks into Asansa:    omnisana -a ABC123 -o"
      opts.separator ""
      opts.separator "Specific options:"

      # # Mandatory argument.
      # opts.on("-r", "--require LIBRARY",
      #         "Require the LIBRARY before executing your script") do |lib|
      #   options.library << lib
      # end

      opts.on("-c", "--config FILE",
              "Read configuration from FILE. Note, command line values override config values!") do |f|
        options.config_file << f
      end

      opts.on("-k", "--api_key KEY",
              "Use the KEY to access the Asana API. Get your API key at https://asana.com/developers") do |k|
        options.api_key << k
      end

      opts.on("-i", "--in",
              "Asana -> OmniFocus. Sync your data Into OmniFocus from Asana.") do |k|
        options.sync_in = true
      end

      opts.on("-o", "--out",
              "OmniFocus -> Asana. Sync your data Out from OmniFocus to Asana.") do |k|
        options.sync_out = true
      end

      opts.on("-d", "--debug",
              "Debug output.") do |k|
        options.debug = true
      end


      # # Optional argument; multi-line description.
      # opts.on("-i", "--inplace [EXTENSION]",
      #         "Edit ARGV files in place",
      #         "  (make backup if EXTENSION supplied)") do |ext|
      #   options.inplace = true
      #   options.extension = ext || ''
      #   options.extension.sub!(/\A\.?(?=.)/, ".")  # Ensure extension begins with dot.
      # end


      # # Cast 'delay' argument to a Float.
      # opts.on("--delay N", Float, "Delay N seconds before executing") do |n|
      #   options.delay = n
      # end
      #
      # # Cast 'time' argument to a Time object.
      # opts.on("-t", "--time [TIME]", Time, "Begin execution at given time") do |time|
      #   options.time = time
      # end
      #
      # # Cast to octal integer.
      # opts.on("-F", "--irs [OCTAL]", OptionParser::OctalInteger,
      #         "Specify record separator (default \\0)") do |rs|
      #   options.record_separator = rs
      # end
      #
      # # List of arguments.
      # opts.on("--list x,y,z", Array, "Example 'list' of arguments") do |list|
      #   options.list = list
      # end
      #
      # # Keyword completion.  We are specifying a specific set of arguments (CODES
      # # and CODE_ALIASES - notice the latter is a Hash), and the user may provide
      # # the shortest unambiguous text.
      # code_list = (CODE_ALIASES.keys + CODES).join(',')
      # opts.on("--code CODE", CODES, CODE_ALIASES, "Select encoding",
      #         "  (#{code_list})") do |encoding|
      #   options.encoding = encoding
      # end
      #
      # # Optional argument with keyword completion.
      # opts.on("--type [TYPE]", [:text, :binary, :auto],
      #         "Select transfer type (text, binary, auto)") do |t|
      #   options.transfer_type = t
      # end

      # Boolean switch.
      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options.verbose = v
      end

      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail("--version", "Show version") do
        puts "1.0.0"
        exit
      end
    end

    opt_parser.parse!(args)
    options
  end  # parse()

end  # class OptparseExample

options = OptparseExample.parse(ARGV)
# pp options
# pp ARGV

Omnisana::Syncer.new( options: options ).execute!